generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Client represents your business clients who use your KYC service
model Client {
  id        String   @id @default(cuid())
  name      String
  apiKey    String   @unique @default(cuid())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientUsers ClientUser[]
  webhooks    Webhook[]

  @@index([apiKey])
}

// User represents the end-users who go through KYC
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientUsers ClientUser[]
  kycSessions KycSession[]
}

// Many-to-many relationship between clients and users
model ClientUser {
  id                 String   @id @default(cuid())
  clientId           String
  userId             String
  clientUserId       String // The ID your client uses to reference this user
  providerCustomerId String? // customerId returned by your KYC partner
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  client      Client       @relation(fields: [clientId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  kycSessions KycSession[]

  @@unique([clientId, clientUserId]) // Ensure client can't have duplicate user references
  @@unique([clientId, userId]) // One user per client
  @@index([clientId])
  @@index([userId])
}

// KYC session tracking
model KycSession {
  id                String    @id @default(cuid())
  clientUserId      String
  status            KycStatus @default(NOT_STARTED)
  kycLink           String? // Link returned by KYC provider
  providerSessionId String? // Session ID from KYC provider
  providerData      Json? // Store any additional data from provider
  startedAt         DateTime  @default(now())
  completedAt       DateTime?
  updatedAt         DateTime  @updatedAt

  // Relations
  clientUser ClientUser @relation(fields: [clientUserId], references: [id])
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?

  @@index([status])
  @@index([clientUserId])
}

// Webhook configuration for multiplexing events
model Webhook {
  id        String   @id @default(cuid())
  clientId  String
  url       String
  secret    String? // For webhook signature verification
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

// Enum for KYC status
// enum KycStatus {
//   PENDING
//   IN_PROGRESS
//   COMPLETED
//   FAILED
//   EXPIRED
// }

enum KycStatus {
  NOT_STARTED
  IN_PROGRESS
  BASIC_COMPLETED
  ADVANCED_COMPLETED
  TEMP_FAILURE
  PERMANENT_FAILURE
}
